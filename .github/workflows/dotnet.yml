name: .NET CI with SonarCloud

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, Test and Analyze
    runs-on: windows-latest

    steps:
      # Setup JDK (Sonar a besoin de Java)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Récupérer le code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Installer .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Cache Sonar
      - name: Cache Sonar packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Sonar scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # Installer Sonar scanner si pas en cache
      - name: Install Sonar scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ${{ runner.temp }}\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ${{ runner.temp }}\scanner
          
      # Install ReportGenerator
      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      # Ensure global tools are on PATH
      - name: Add .NET tools to PATH
        shell: powershell
        run: $env:PATH += ";$env:USERPROFILE\.dotnet\tools"

      # Analyse Sonar + Build + Tests
      - name: Build and Analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
           cd backend
           ${{ runner.temp }}\scanner\dotnet-sonarscanner begin /k:"AllanM-dev_portfolio" /o:"allanm-dev" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="coverage-report/Cobertura.xml"
           dotnet build Portfolio.sln --configuration Release
           dotnet test Portfolio.API\Portfolio.Test\Portfolio.Test.csproj --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory TestResults
           reportgenerator "-reports:TestResults/**/coverage.cobertura.xml" "-targetdir:coverage-report" -reporttypes:Cobertura
           ${{ runner.temp }}\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
